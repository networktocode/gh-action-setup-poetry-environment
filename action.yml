---
name: "Setup the environment"
description: "This action creates the Poetry environment and load virtual environment from cache if cache exists."
inputs:
  poetry-install-options:
    description: "Options pass to the poetry install command"
    required: false
    default: "--only dev"
  python-version:
    description: "Python version that will be deployed"
    required: false
    default: "3.9"
  cache-version:
    description: "Cache version for the environment, can be used to invalidate the current cache"
    required: false
    default: ""
outputs:
  cache-used:
    description: "The property that defines if cache was used"
    value: "${{ steps.cached-poetry.outputs.cache-hit }}"
  python-version:
    description: "Exact python version used"
    value: "${{ steps.python-setup.outputs.python-version }}"
runs:
  using: "composite"
  steps:
    - name: "Set up Python"
      uses: "actions/setup-python@v2"
      id: "python-setup"
      with:
        python-version: "${{ inputs.python-version }}"
    - name: "Log: Install Poetry"
      run: "echo Installing Poetry"
      shell: "bash"
    - name: "Install Poetry"
      run: "pip install poetry"
      shell: "bash"
    - name: "Log: Check cache"
      run: "echo Checking cache"
      shell: "bash"
    - name: "Cache"
      uses: "actions/cache@v2"
      id: "cached-poetry"
      with:
        path: "~/.cache/pypoetry/virtualenvs/"
        key: "${{ runner.os }}-poetry-${{ steps.python-setup.outputs.python-version }}-${{ hashFiles('./poetry.lock') }}${{ inputs.cache-version }}"
    - name: "Install environment"
      run: "poetry install ${{ inputs.poetry-install-options }}"
      shell: "bash"
